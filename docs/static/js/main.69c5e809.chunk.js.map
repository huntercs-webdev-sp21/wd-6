{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","randomChar","String","fromCharCode","Math","floor","random","App","useState","body","setBody","secretIndex","setSecretIndex","secrets","setSecrets","className","name","placeholder","value","onChange","e","target","onClick","secretName","secret","axios","post","then","catch","console","log","createSecret","put","updateSecret","map","i","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAKMA,EAAW,oFAEXC,EAAa,kBAAMC,OAAOC,aAAaC,KAAKC,MAAM,GAAqB,GAAhBD,KAAKE,YAkFnDC,MAhFf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEyBF,oBAAU,GAFnC,mBAENG,EAFM,KAEOC,EAFP,OAGiBJ,mBAAS,IAH1B,mBAGNK,EAHM,KAGGC,EAHH,KA+Cb,OACE,sBAAKC,UAAU,YAAf,UACE,oBAAIA,UAAU,SAAd,4BACA,mBAAGA,UAAU,cAAb,2OAOA,oBAAIA,UAAU,SAAd,uBAGA,oBAAIA,UAAU,SAAd,0BACA,oBAAIA,UAAU,SAAd,SACGJ,EAAc,EAAI,cAAlB,uBAAkDE,EAAQF,GAAaK,KAAvE,QAEH,0BAAUC,YAAY,OAAOC,MAAOT,EAAMU,SAAU,SAAAC,GAAC,OAAIV,EAAQU,EAAEC,OAAOH,UAC1E,wBAAQI,QApCG,WACTX,EAAc,EAzBC,WAEnB,IAAMY,EAAatB,IAAeA,IAAeA,IAAeA,IAC1DuB,EAAS,CAAER,KAAMO,EAAYd,KAAMA,GACzCgB,IAAMC,KAAK1B,EAAWuB,EAAYC,GAC/BG,MAAK,WACJb,EAAW,GAAD,mBAAKD,GAAL,CAAcW,KACxBd,EAAQ,OAETkB,OAAM,kBAAMC,QAAQC,IAAI,qBAiBzBC,GAdiB,WACnB,IAAMP,EAAS,CAACR,KAAMH,EAAQF,GAAaK,KAAMP,KAAMA,GACvDgB,IAAMO,IAAIhC,EAAWa,EAAQF,GAAaK,KAAMQ,GAC7CG,MAAK,WACJd,EAAQF,GAAaF,KAAOA,EAC5BK,EAAW,YAAID,IACfD,GAAgB,GAChBF,EAAQ,OAETkB,OAAM,kBAAMC,QAAQC,IAAI,mBAOzBG,IAgCA,kBACCtB,GAAe,GAAM,wBAAQW,QAxBf,WACjBV,GAAgB,GAChBF,EAAQ,KAsBgB,yBAEtB,oBAAIK,UAAU,SAAd,4BACCF,EAAQqB,KAAI,SAACV,EAAQW,GAAT,OACX,sBAAuBpB,UAAU,mBAAjC,UACE,6BAAKS,EAAOR,OACZ,4BAAIQ,EAAOf,OACX,wBAAQa,SApCGc,EAoCiBD,EApCR,WAC1BvB,EAAewB,GACf1B,EAAQG,EAAQuB,GAAO3B,QAkCjB,oBAHQe,EAAOR,MAjCJ,IAAAoB,SClCNC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.69c5e809.chunk.js","sourcesContent":["import axios from 'axios';\nimport { useState } from 'react';\nimport './App.css';\n\n// API documentation: https://documenter.getpostman.com/view/3281832/SzmZeMLC\nconst BASE_URL = 'https://getpantry.cloud/apiv1/pantry/ecf03d36-db58-4d1f-b2d2-be3de4515084/basket/';\n\nconst randomChar = () => String.fromCharCode(Math.floor(97 + Math.random() * 26));\n\nfunction App() {\n  const [body, setBody] = useState('');\n  const [secretIndex, setSecretIndex] = useState(-1);\n  const [secrets, setSecrets] = useState([]);\n\n  const createSecret = () => {\n    // four random chars as name\n    const secretName = randomChar() + randomChar() + randomChar() + randomChar();\n    const secret = { name: secretName, body: body };\n    axios.post(BASE_URL + secretName, secret)\n      .then(() => {\n        setSecrets([...secrets, secret]);\n        setBody('');\n      })\n      .catch(() => console.log('create failure'));\n  }\n\n  const updateSecret = () => {\n    const secret = {name: secrets[secretIndex].name, body: body};\n    axios.put(BASE_URL + secrets[secretIndex].name, secret)\n      .then(() => {\n        secrets[secretIndex].body = body;\n        setSecrets([...secrets]);\n        setSecretIndex(-1);\n        setBody('');\n      })\n      .catch(() => console.log('edit failure'));\n  }\n\n  const onSave = () => {\n    if (secretIndex < 0) {\n      createSecret();\n    } else {\n      updateSecret();\n    }\n  }\n\n  const editSecret = index => () => {\n    setSecretIndex(index);\n    setBody(secrets[index].body);\n  }\n\n  const cancelEdit = () => {\n    setSecretIndex(-1);\n    setBody('');\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"header\">Secrets Locker</h1>\n      <p className=\"description\">\n        This is a shared secrets locker.\n        Anyone else can come to this page and access a secret given the secret name.\n        Only you can edit your secrets as long as you are on this page.\n        Secrets remain unless you delete them manually.\n      </p>\n      {/* read */}\n      <h2 className=\"header\">Get data:</h2>\n\n      {/* create/update/delete */}\n      <h2 className=\"header\">Manage data:</h2>\n      <h3 className=\"header\">\n        {secretIndex < 0 ? 'Create New:' : `Edit secret '${secrets[secretIndex].name}':`}\n      </h3>\n      <textarea placeholder=\"Data\" value={body} onChange={e => setBody(e.target.value)} />\n      <button onClick={onSave}>Save</button>\n      {secretIndex >= 0 && (<button onClick={cancelEdit}>Cancel edit</button>)}\n\n      <h3 className=\"header\">Update/Delete:</h3>\n      {secrets.map((secret, i) => (\n        <div key={secret.name} className=\"secret container\">\n          <h4>{secret.name}</h4>\n          <p>{secret.body}</p>\n          <button onClick={editSecret(i)}>Edit</button>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}